# source('/Users/blosberg/Desktop/Science/2016_postdoc_MDC/RCode_deconv/func_def.R') #---get what functions you need.
#takesep="cl12"
takesep="OW"
num_Districts=12
# ========= read in shape file ==================
Berlinshapefile <- "./source_data/RBS_OD_UWB_AGH2016/UWB.shp"
Berlingeo_fine <- read_shape(file=Berlinshapefile)
Coarse_shapefile  = "./source_data/Wkr_25833/Wkr_25833.shp"
Berlingeo_coarse <- read_shape(file=Coarse_shapefile)
# ========= read in vote results ================
Data_init = read.csv("./source_data/DL_BE_AB2016_V2_formatted.txt",sep="\t", header=TRUE,stringsAsFactors=TRUE)
# Data_init = read.csv("./source_data/DL_BE_AB2016_V2_formatted.txt",sep="\t", header=TRUE,stringsAsFactors=TRUE)
covariate_data_init = read.csv("./source_data/DL_BE_AH2016_covariates_Strukturdaten.csv",sep="\t", header=TRUE,stringsAsFactors=TRUE)
#--- now get rid of all parties below 1%
dim_Data_init = dim(Data_init)
should_keep =  matrix(TRUE, 1, dim_Data_init[2]); names(should_keep) = names(Data_init)
party_votes =  matrix(0,    1, dim_Data_init[2]); names(party_votes) = names(Data_init)
Total_votes = sum(Data_init[,17])
THRESH=0.05
for( i in c(18:dim_Data_init[2]) )
{
party_votes[i] = sum(Data_init[,i])
if( party_votes[i]/Total_votes < THRESH )
{
should_keep[,i]=FALSE
}
}
Data     = Data_init[,should_keep]
num_parties=sum(as.integer(should_keep[18:dim_Data_init[2]]))
dim_Data = dim(Data)
#============== THIS IS NOW THE DATA MATRIX WITH ONLY THE PARTIES OVER 1% INCLUDED.       =======
#============== "Urn" and "Brief" results are still mixed. Next step is to seperate those =======
# vote_share =  vote_share_init[,overthresh]
Data_Urn   = Data[ Data[,6]=="Urnenwahlbezirk", ]
Data_Brief = Data[ Data[,6]=="Briefwahlbezirk", ]
#--- now reorganize the data so that the points are in the same order as in the geo-shape file.
# --- first grab the last two entries displaced to the end of the shape file:
# --- Data_Urn     = remove_row (Data_Urn, cbind(second_to_last_index, last_index) ) # takes rrow_index out of Matrix_in
second_to_last_index = which(as.integer(Data_Urn[,5]==608) * as.integer(Data_Urn[,3]==07) ==1 )
last_index           = which(as.integer(Data_Urn[,5]==116) * as.integer(Data_Urn[,3]==05) ==1 )
second_to_last_entry_original = Data_Urn[second_to_last_index,]
last_entry_original   = Data_Urn[last_index,]
dummy=dim(Data_Urn)
num_ridings=dummy[1]
num_fields =dummy[2]
temp_data = rearrange_to_match_shape_file(Data_Urn, Berlingeo_fine, num_Districts)
second_to_last_index = which(as.integer(temp_data[,5]==608) * as.integer(temp_data[,3]==07) ==1 )
second_to_last_entry = temp_data[second_to_last_index,]
last_index   = which(as.integer(temp_data[,5]==116) * as.integer(temp_data[,3]==05) ==1 )
last_entry   = temp_data[last_index,]
temp1 = temp_data[-c(second_to_last_index, last_index),]
temp2 = rbind.data.frame(temp1, rbind(second_to_last_entry,last_entry))
Data_Urn        = temp2
vote_share_Urn  = Data_Urn[,18:(18+num_parties-1)]/rowSums(Data_Urn[,18:(18+num_parties-1)])
Data_Urn
Data_Urn[1:4,]
Data_Urn[1:4,1:5]
Data_Urn[189:190,1:5]
dim(Data_Urn)
Data_Urn[1770:1779,1:5]
second_to_last_index = which( covariate_data_init[,1]==07608 )
second_to_last_index
last_index           = which( covariate_data_init[,1]==05116 )
last_index
covariate_data_init[688,1:5]
covariate_data_init[1042,1:5]
covariate_data_init[1,1]
covariate_data_init[1,1]+1
string(12)
tostring(12)
as.character(12)
as.character(9)
paste("0",as.character(9))
?paste
paste("0",as.character(9),sep = "")
9%2
9%%2
9%%5
9%%1
9.3%%1
district_string <- function( District )
{
string result
if(Distric %% 1 != 0 || (Distric <= 0 || Distric >= 100)  )
{stop("district_string only handles integers between 1 and 100.")}
if (District >= 10 && District <= 99)
{ result=as.character(District) }
else if (District >= 1 && District <= 9)
{ result = paste("0",as.character(District),sep = "") }
else
{
stop(paste("unexpected case: District =",as.character(District) ) )
}
return result
}
district_string <- function( District )
{
if(Distric %% 1 != 0 || (Distric <= 0 || Distric >= 100)  )
{stop("district_string only handles integers between 1 and 100.")}
if (District >= 10 && District <= 99)
{ result=as.character(District) }
else if (District >= 1 && District <= 9)
{ result = paste("0",as.character(District),sep = "") }
else
{
stop(paste("unexpected case: District =",as.character(District) ) )
}
return(result)
}
district_string(1)
district_string <- function( District )
{
if(District %% 1 != 0 || (District <= 0 || District >= 100)  )
{stop("district_string only handles integers between 1 and 100.")}
if (District >= 10 && District <= 99)
{ result=as.character(District) }
else if (District >= 1 && District <= 9)
{ result = paste("0",as.character(District),sep = "") }
else
{
stop(paste("unexpected case: District =",as.character(District) ) )
}
return(result)
}
district_string(1)
district_string(15)
district_string(-``)
district_string(-1)
district_string(-1.``)
district_string(-1.1)
district_string(4.2)
district_string(4)
district_string(100)
district_string(99)
Berlingeo_fine$BEZ
length(Berlingeo_fine$BEZ)
as.character(Berlingeo_fine$BEZ)
length ( as.character(Berlingeo_fine$BEZ) )
length ( paste( as.character(Berlingeo_fine$BEZ) , as.character(Berlingeo_fine$UWB) ) )
paste( as.character(Berlingeo_fine$BEZ) , as.character(Berlingeo_fine$UWB) )
paste( as.character(Berlingeo_fine$BEZ) , as.character(Berlingeo_fine$UWB), sep="" )
paste( as.character(Berlingeo_fine$BEZ) , as.character(Berlingeo_fine$UWB), sep="" ) >test1
paste( as.character(Berlingeo_fine$BEZ) , as.character(Berlingeo_fine$UWB), sep="" ) -> test1
test1[1]
test1[2]
covariate_data_init[1,1]
covariate_data_init = read.csv("./source_data/DL_BE_AH2016_covariates_Strukturdaten.csv",sep="\t", header=TRUE,stringsAsFactors=FALSE)
covariate_data_init[1,1]
covariate_data_init = read.csv("./source_data/DL_BE_AH2016_covariates_Strukturdaten.csv",sep="\t", header=TRUE,stringsAsFactors=FALSE)
covariate_data_init[1,]
covariate_data_init[1,1]
?read.table
covariate_data_init = read.table("./source_data/DL_BE_AH2016_covariates_Strukturdaten.csv",sep="\t", header=TRUE,stringsAsFactors=FALSE,
colClasses=c('character'))
covariate_data_init[1:5,1:5]
covariate_data_init[1:5,1:5]
covariate_data_init = read.csv("./source_data/DL_BE_AH2016_covariates_Strukturdaten.csv",sep="\t", header=TRUE,stringsAsFactors=FALSE)
covariate_data_init[1:5,1:5]
district_string(covariate_data_init[,2])
as.character(district_string(covariate_data_init[,2]))
covariate_data_init[1:4,1:5]
compoundname = paste( district_string(CD[,2]), CD[,4], sep=""  )
compoundname = paste( district_string( covariate_data_init[,2]), covariate_data_init[,4], sep=""  )
length(compoundname)
compoundname[1:12]
##-------------- BV_SVM.R - By Bren Osberg, MDC Berlin, started October 2016.
#-- last updated on never.
##--- Does support vector classification on the voting districts in Berlin
## ==================================================================================================
# install.packages("tmap")
# install.packages("leaflet") #--- had to install these to get it working.
# install.packages("tmaptools")
# install.packages("tsne")
library("tmap")
library("leaflet")
library("tmaptools")
# CLEAN UP EVERYTHING:
# == shape data can be obtained from:
# == https://www.wahlen-berlin.de/wahlen/BE2016/Wahlkreiseinteil/wahlkreiseinteil.asp?sel1=1253&sel2=1045
# == actual voting data obtained from:
# == https://www.wahlen-berlin.de/Wahlen/BE2016/afspraes/download/download.html
rm(list=ls())
setwd("/Users/blosberg/Desktop/Science/postdoc_MDC/Berlin_vote/calculations/")
source('./funcs_Berlin.R') #---get what functions you need.
source('/Users/blosberg/Desktop/Science/Code_library/funcs_general.R')
# source('/Users/blosberg/Desktop/Science/2016_postdoc_MDC/RCode_deconv/func_def.R') #---get what functions you need.
#takesep="cl12"
takesep="OW"
num_Districts=12
# ========= read in shape file ==================
Berlinshapefile <- "./source_data/RBS_OD_UWB_AGH2016/UWB.shp"
Berlingeo_fine <- read_shape(file=Berlinshapefile)
Coarse_shapefile  = "./source_data/Wkr_25833/Wkr_25833.shp"
Berlingeo_coarse <- read_shape(file=Coarse_shapefile)
# ========= read in vote results ================
Data_init = read.csv("./source_data/DL_BE_AB2016_V2_formatted.txt",sep="\t", header=TRUE,stringsAsFactors=TRUE)
# Data_init = read.csv("./source_data/DL_BE_AB2016_V2_formatted.txt",sep="\t", header=TRUE,stringsAsFactors=TRUE)
covariate_data_init = read.csv("./source_data/DL_BE_AH2016_covariates_Strukturdaten.csv",sep="\t", header=TRUE,stringsAsFactors=FALSE)
# covariate_data_init = read.table("./source_data/DL_BE_AH2016_covariates_Strukturdaten.csv",sep="\t", header=TRUE,stringsAsFactors=FALSE,                                  colClasses=c('character'))
# covariate_data_init[1:5,1:5]
#--- now get rid of all parties below 1%
dim_Data_init = dim(Data_init)
should_keep =  matrix(TRUE, 1, dim_Data_init[2]); names(should_keep) = names(Data_init)
party_votes =  matrix(0,    1, dim_Data_init[2]); names(party_votes) = names(Data_init)
Total_votes = sum(Data_init[,17])
THRESH=0.05
for( i in c(18:dim_Data_init[2]) )
{
party_votes[i] = sum(Data_init[,i])
if( party_votes[i]/Total_votes < THRESH )
{
should_keep[,i]=FALSE
}
}
Data     = Data_init[,should_keep]
num_parties=sum(as.integer(should_keep[18:dim_Data_init[2]]))
dim_Data = dim(Data)
#============== THIS IS NOW THE DATA MATRIX WITH ONLY THE PARTIES OVER 1% INCLUDED.       =======
#============== "Urn" and "Brief" results are still mixed. Next step is to seperate those =======
Data_Urn   = Data[ Data[,6]=="Urnenwahlbezirk", ]
Data_Brief = Data[ Data[,6]=="Briefwahlbezirk", ]
#--- now reorganize the data so that the points are in the same order as in the geo-shape file.
# --- first grab the last two entries displaced to the end of the shape file:
dummy=dim(Data_Urn); num_ridings=dummy[1]; num_fields =dummy[2]
temp_data = rearrange_to_match_shape_file(Data_Urn, Berlingeo_fine, num_Districts)
second_to_last_index = which(as.integer(temp_data[,5]==608) * as.integer(temp_data[,3]==07) ==1 )
second_to_last_entry = temp_data[second_to_last_index,]
last_index   = which(as.integer(temp_data[,5]==116) * as.integer(temp_data[,3]==05) ==1 )
last_entry   = temp_data[last_index,]
temp1 = temp_data[-c(second_to_last_index, last_index),]
temp2 = rbind.data.frame(temp1, rbind(second_to_last_entry,last_entry))
Data_Urn        = temp2
vote_share_Urn  = Data_Urn[,18:(18+num_parties-1)]/rowSums(Data_Urn[,18:(18+num_parties-1)])
#--- now do the same reorganization for the covariate data (i.e. put in same order as in the geo-shape file)
# --- Again, first grab the last two entries displaced to the end of the shape file:
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine, num_Districts)
TEST_covmap = identical( paste( temp_data(CD[,2]), CD[,4], sep=""  ),  paste( Berlingeo_fine$BEZ, Berlingeo_fine$UWB, sep=""  ) )
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine)
debugSource('~/Desktop/Science/Code_library/funcs_general.R')
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine)
debugSource('~/Desktop/Science/Code_library/funcs_general.R')
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine)
tempsumcol
tempsumrow
i
x2[1341]
x2[1340]
x2[1342]
x1
x1==09618
which(x1==09618)
which(x1==09617)
which(x1==09619)
tempsumrow
tempsumcol
i
max(result)
rowSums(result)
min(rowSums(result))
max(rowSums(result))
min(colSums(result))
max(colSums(result))
which(colSums(result) != 1)
which(rowSums(result) != 1)
x1
x1[1340:1350]
x2[1340:1350]
debugSource('~/Desktop/Science/postdoc_MDC/Berlin_vote/calculations/funcs_Berlin.R')
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine)
length(compoundname_CD)
compoundname_CD[1340:1350]
compoundname_geo [1340:1350]
CD[1340:1350,2]
district_string(CD[1340:1350,2])
district_string(9)
district_string(10)
x2[1]
CD[1]
CD[1,1]
test=CD[,2]
length(test)
dim(test)
dim(test)==NULL
dim(test)=="NULL"
(dim(test)=="NULL")
(dim(test)==NULL)
length(test)
length(CD)
district_string(CD[1340:1350,2])
district_string(CD[1344:1345,2])
district_string(CD[1343:1345,2])
dim(district_string(CD[1343:1345,2]) )
length(district_string(CD[1343:1345,2]) )
is.vector(district_string(CD[1343:1345,2]) )
is.vector(CD)
is.vector(district_string(CD[1343:1345,2]) )
L=length(district_string(CD[1343:1345,2]) )
L
temp=vector(L)
temp=vector(0,L)
?vector
output=vector("character" L)
output=vector("character", L)
##-------------- BV_SVM.R - By Bren Osberg, MDC Berlin, started October 2016.
#-- last updated on never.
##--- Does support vector classification on the voting districts in Berlin
## ==================================================================================================
# install.packages("tmap")
# install.packages("leaflet") #--- had to install these to get it working.
# install.packages("tmaptools")
# install.packages("tsne")
library("tmap")
library("leaflet")
library("tmaptools")
# CLEAN UP EVERYTHING:
# == shape data can be obtained from:
# == https://www.wahlen-berlin.de/wahlen/BE2016/Wahlkreiseinteil/wahlkreiseinteil.asp?sel1=1253&sel2=1045
# == actual voting data obtained from:
# == https://www.wahlen-berlin.de/Wahlen/BE2016/afspraes/download/download.html
rm(list=ls())
setwd("/Users/blosberg/Desktop/Science/postdoc_MDC/Berlin_vote/calculations/")
source('./funcs_Berlin.R') #---get what functions you need.
source('/Users/blosberg/Desktop/Science/Code_library/funcs_general.R')
# source('/Users/blosberg/Desktop/Science/2016_postdoc_MDC/RCode_deconv/func_def.R') #---get what functions you need.
#takesep="cl12"
takesep="OW"
num_Districts=12
# ========= read in shape file ==================
Berlinshapefile <- "./source_data/RBS_OD_UWB_AGH2016/UWB.shp"
Berlingeo_fine <- read_shape(file=Berlinshapefile)
Coarse_shapefile  = "./source_data/Wkr_25833/Wkr_25833.shp"
Berlingeo_coarse <- read_shape(file=Coarse_shapefile)
# ========= read in vote results ================
Data_init = read.csv("./source_data/DL_BE_AB2016_V2_formatted.txt",sep="\t", header=TRUE,stringsAsFactors=TRUE)
# Data_init = read.csv("./source_data/DL_BE_AB2016_V2_formatted.txt",sep="\t", header=TRUE,stringsAsFactors=TRUE)
covariate_data_init = read.csv("./source_data/DL_BE_AH2016_covariates_Strukturdaten.csv",sep="\t", header=TRUE,stringsAsFactors=FALSE)
# covariate_data_init = read.table("./source_data/DL_BE_AH2016_covariates_Strukturdaten.csv",sep="\t", header=TRUE,stringsAsFactors=FALSE,                                  colClasses=c('character'))
# covariate_data_init[1:5,1:5]
#--- now get rid of all parties below 1%
dim_Data_init = dim(Data_init)
should_keep =  matrix(TRUE, 1, dim_Data_init[2]); names(should_keep) = names(Data_init)
party_votes =  matrix(0,    1, dim_Data_init[2]); names(party_votes) = names(Data_init)
Total_votes = sum(Data_init[,17])
THRESH=0.05
for( i in c(18:dim_Data_init[2]) )
{
party_votes[i] = sum(Data_init[,i])
if( party_votes[i]/Total_votes < THRESH )
{
should_keep[,i]=FALSE
}
}
Data     = Data_init[,should_keep]
num_parties=sum(as.integer(should_keep[18:dim_Data_init[2]]))
dim_Data = dim(Data)
#============== THIS IS NOW THE DATA MATRIX WITH ONLY THE PARTIES OVER 1% INCLUDED.       =======
#============== "Urn" and "Brief" results are still mixed. Next step is to seperate those =======
Data_Urn   = Data[ Data[,6]=="Urnenwahlbezirk", ]
Data_Brief = Data[ Data[,6]=="Briefwahlbezirk", ]
#--- now reorganize the data so that the points are in the same order as in the geo-shape file.
# --- first grab the last two entries displaced to the end of the shape file:
dummy=dim(Data_Urn); num_ridings=dummy[1]; num_fields =dummy[2]
temp_data = rearrange_to_match_shape_file(Data_Urn, Berlingeo_fine, num_Districts)
second_to_last_index = which(as.integer(temp_data[,5]==608) * as.integer(temp_data[,3]==07) ==1 )
second_to_last_entry = temp_data[second_to_last_index,]
last_index   = which(as.integer(temp_data[,5]==116) * as.integer(temp_data[,3]==05) ==1 )
last_entry   = temp_data[last_index,]
temp1 = temp_data[-c(second_to_last_index, last_index),]
temp2 = rbind.data.frame(temp1, rbind(second_to_last_entry,last_entry))
Data_Urn        = temp2
vote_share_Urn  = Data_Urn[,18:(18+num_parties-1)]/rowSums(Data_Urn[,18:(18+num_parties-1)])
#--- now do the same reorganization for the covariate data (i.e. put in same order as in the geo-shape file)
# --- Again, first grab the last two entries displaced to the end of the shape file:
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine)
debugSource('~/Desktop/Science/postdoc_MDC/Berlin_vote/calculations/funcs_Berlin.R')
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine)
debugSource('~/Desktop/Science/postdoc_MDC/Berlin_vote/calculations/funcs_Berlin.R')
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine)
source('~/Desktop/Science/postdoc_MDC/Berlin_vote/calculations/funcs_Berlin.R')
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine)
TEST_covmap = identical( paste( temp_data(CD[,2]), CD[,4], sep=""  ),  paste( Berlingeo_fine$BEZ, Berlingeo_fine$UWB, sep=""  ) )
TEST_covmap = identical( paste( temp_data[,2], temp_data[,4], sep=""  ),  paste( Berlingeo_fine$BEZ, Berlingeo_fine$UWB, sep=""  ) )
TEST_covmap
paste( temp_data[,2], temp_data[,4], sep=""  ) == paste( Berlingeo_fine$BEZ, Berlingeo_fine$UWB, sep=""  )
TEST_covmap = identical( paste( district_string(temp_data[,2]), temp_data[,4], sep=""  ),  paste( Berlingeo_fine$BEZ, Berlingeo_fine$UWB, sep=""  ) )
TEST_covmap
debugSource('~/Desktop/Science/postdoc_MDC/Berlin_vote/calculations/funcs_Berlin.R')
##-------------- BV_SVM.R - By Bren Osberg, MDC Berlin, started October 2016.
#-- last updated on never.
##--- Does support vector classification on the voting districts in Berlin
## ==================================================================================================
# install.packages("tmap")
# install.packages("leaflet") #--- had to install these to get it working.
# install.packages("tmaptools")
# install.packages("tsne")
library("tmap")
library("leaflet")
library("tmaptools")
# CLEAN UP EVERYTHING:
# == shape data can be obtained from:
# == https://www.wahlen-berlin.de/wahlen/BE2016/Wahlkreiseinteil/wahlkreiseinteil.asp?sel1=1253&sel2=1045
# == actual voting data obtained from:
# == https://www.wahlen-berlin.de/Wahlen/BE2016/afspraes/download/download.html
rm(list=ls())
setwd("/Users/blosberg/Desktop/Science/postdoc_MDC/Berlin_vote/calculations/")
source('./funcs_Berlin.R') #---get what functions you need.
source('/Users/blosberg/Desktop/Science/Code_library/funcs_general.R')
# source('/Users/blosberg/Desktop/Science/2016_postdoc_MDC/RCode_deconv/func_def.R') #---get what functions you need.
#takesep="cl12"
takesep="OW"
num_Districts=12
# ========= read in shape file ==================
Berlinshapefile <- "./source_data/RBS_OD_UWB_AGH2016/UWB.shp"
Berlingeo_fine <- read_shape(file=Berlinshapefile)
Coarse_shapefile  = "./source_data/Wkr_25833/Wkr_25833.shp"
Berlingeo_coarse <- read_shape(file=Coarse_shapefile)
# ========= read in vote results ================
Data_init = read.csv("./source_data/DL_BE_AB2016_V2_formatted.txt",sep="\t", header=TRUE,stringsAsFactors=TRUE)
# Data_init = read.csv("./source_data/DL_BE_AB2016_V2_formatted.txt",sep="\t", header=TRUE,stringsAsFactors=TRUE)
covariate_data_init = read.csv("./source_data/DL_BE_AH2016_covariates_Strukturdaten.csv",sep="\t", header=TRUE,stringsAsFactors=FALSE)
# covariate_data_init = read.table("./source_data/DL_BE_AH2016_covariates_Strukturdaten.csv",sep="\t", header=TRUE,stringsAsFactors=FALSE,                                  colClasses=c('character'))
# covariate_data_init[1:5,1:5]
#--- now get rid of all parties below 1%
dim_Data_init = dim(Data_init)
should_keep =  matrix(TRUE, 1, dim_Data_init[2]); names(should_keep) = names(Data_init)
party_votes =  matrix(0,    1, dim_Data_init[2]); names(party_votes) = names(Data_init)
Total_votes = sum(Data_init[,17])
THRESH=0.05
for( i in c(18:dim_Data_init[2]) )
{
party_votes[i] = sum(Data_init[,i])
if( party_votes[i]/Total_votes < THRESH )
{
should_keep[,i]=FALSE
}
}
Data     = Data_init[,should_keep]
num_parties=sum(as.integer(should_keep[18:dim_Data_init[2]]))
dim_Data = dim(Data)
#============== THIS IS NOW THE DATA MATRIX WITH ONLY THE PARTIES OVER 1% INCLUDED.       =======
#============== "Urn" and "Brief" results are still mixed. Next step is to seperate those =======
Data_Urn   = Data[ Data[,6]=="Urnenwahlbezirk", ]
Data_Brief = Data[ Data[,6]=="Briefwahlbezirk", ]
#--- now reorganize the data so that the points are in the same order as in the geo-shape file.
# --- first grab the last two entries displaced to the end of the shape file:
dummy=dim(Data_Urn); num_ridings=dummy[1]; num_fields =dummy[2]
temp_data = rearrange_to_match_shape_file(Data_Urn, Berlingeo_fine, num_Districts)
second_to_last_index = which(as.integer(temp_data[,5]==608) * as.integer(temp_data[,3]==07) ==1 )
second_to_last_entry = temp_data[second_to_last_index,]
last_index   = which(as.integer(temp_data[,5]==116) * as.integer(temp_data[,3]==05) ==1 )
last_entry   = temp_data[last_index,]
temp1 = temp_data[-c(second_to_last_index, last_index),]
temp2 = rbind.data.frame(temp1, rbind(second_to_last_entry,last_entry))
Data_Urn        = temp2
vote_share_Urn  = Data_Urn[,18:(18+num_parties-1)]/rowSums(Data_Urn[,18:(18+num_parties-1)])
#--- now do the same reorganization for the covariate data (i.e. put in same order as in the geo-shape file)
# --- Again, first grab the last two entries displaced to the end of the shape file:
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine)
TEST_covmap = identical( paste( district_string(temp_data[,2]), temp_data[,4], sep=""  ),  paste( Berlingeo_fine$BEZ, Berlingeo_fine$UWB, sep=""  ) )
min(rowSums(CD_to_geo_rot))
max(rowSums(CD_to_geo_rot))
min(colSums(CD_to_geo_rot))
max(colSums(CD_to_geo_rot))
min(CD_to_geo_rot)
max(CD_to_geo_rot)
min(-1,0,1)
TEST_covmap
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine)
TEST_covmap = identical( paste( district_string(temp_data[,2]), temp_data[,4], sep=""  ),  paste( Berlingeo_fine$BEZ, Berlingeo_fine$UWB, sep=""  ) )
source('~/Desktop/Science/postdoc_MDC/Berlin_vote/calculations/./funcs_Berlin.R')
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine)
TEST_covmap = identical( paste( district_string(temp_data[,2]), temp_data[,4], sep=""  ),  paste( Berlingeo_fine$BEZ, Berlingeo_fine$UWB, sep=""  ) )
TEST_covmap
k=3
results_Urn   = get_rotation_and_clusters( Data_Urn,   k=3)
results_Brief = get_rotation_and_clusters( Data_Brief, k=3)
Cluster=factor(results_Urn$kmeans_out$cluster)
levels(Cluster)=c("West","Ost","Integriert")
temp_data = rearrange_covariate_to_match_shape_file(covariate_data_init, Berlingeo_fine)
TEST_covmap = identical( paste( district_string(temp_data[,2]), temp_data[,4], sep=""  ),  paste( Berlingeo_fine$BEZ, Berlingeo_fine$UWB, sep=""  ) )
covariate_data_rearranged = temp_date
covariate_data_rearranged = temp_data
dim(covariate_data_rearranged)
Berlinmap_Urn <- append_data(Berlingeo_fine, data.frame(covariate_data_rearranged), key.shp = NULL, fixed.order=TRUE, key.data="Cluster", ignore.duplicates=TRUE)
covariate_data_rearranged[1,]
qtm(Berlinmap_Urn, "Ausländer.Prozent", fill.palette=c("deepskyblue","firebrick2","darkgreen") )
qtm(Berlinmap_Urn, "EinwohnerAnzahl", fill.palette=c("deepskyblue","firebrick2","darkgreen") )
covariate_data_rearranged[1,23:26]
covariate_data_rearranged[1,23:26]
covariate_data_rearranged[1,23]
covariate_data_rearranged[1,23:24]
qtm(Berlinmap_Urn, "eutsche.65.und.älter.Prozen")
covariate_data_rearranged[1,20:24]
qtm(Berlinmap_Urn, "Deutsche.18.65.Prozen")
qtm(Berlinmap_Urn, "Ausländer.Prozent")
covariate_data_rearranged[1,30:34]
qtm(Berlinmap_Urn, "U.Bürger.16...Prozen")
covariate_data_rearranged[1,30:45]
qtm(Berlinmap_Urn, "eutsche.18.25.Proze")
qtm(Berlinmap_Urn, "eutsche.18.25.Prozen")
covariate_data_rearranged[1,35:45]
qtm(Berlinmap_Urn, "eutsche.25.35.Prozen")
covariate_data_rearranged[40:45]
covariate_data_rearranged[1,40:45]
covariate_data_rearranged[1,43:43]
covariate_data_rearranged[1,43:44]
names(covariate_data_rearranged[1,43:44])
qtm(Berlinmap_Urn, "eutsche.70...Prozen")
names(covariate_data_rearranged[1,41:44])
qtm(Berlinmap_Urn, "eutsche.60.70.Prozen")
names(covariate_data_rearranged[1,39:41])
qtm(Berlinmap_Urn, "eutsche.45.60.Prozen")
